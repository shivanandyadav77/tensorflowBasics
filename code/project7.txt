# import libraries

!pip install tensorflow-gpu=2.0.0.alpha0

import tensorflow as tf

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random


from google.colab import drive
drive.mount('/content/drive')



# load dataset

fashion_train_df=pd.read_csv('content/drive/My Drive/Colab Notebooks/Fashion Dataset/fashion-mnist_train.csv',sep=','')
fashion_test_df=pd.read_csv('/content/drive/My Drive/Colab Notebooks/Fashion Dataset/fashion-mnist_test.csv', sep = ',')
#or
(train_images,train_labels),(test_images,test_labels)=tf.keras.datasets.mnist.load_data()


# data visualization

fashion_train_df.head()

fashion_train_df.tail()

fashion_test_df.head()

fashion_test_df.tail()

fashion_train_df.shape

#create training and testing arrays

training=np.array(fashion_training_df,dtype='float32')
testing=np.array(fashion_test_df,dtype='float32')

training.shape

training

testing

# let view some images

i =random.randint(1, 60000) # select any random index from 1 to 60,000

plt.imshow(training[i,1:]).reshape((28,28)) #reshape and plot the image

plt.imshow(training[i,1:].reshape((28,28)),cmap='gray') #reshape and plot the image


label =training[i,0]
label


# lets view more images in a grid format
#Define the dimension of the plot grid

W_grid=15
L_grid=15

#fig, axes=plt.subplots(L_grid,W_grid)
#subplot return the figure the object and axes object
# we can use the axes object to plot obeject to plot specific figures at various location


fig,axes=plt.subplot(L_grid,W_grid,figsize=(17,17))
axes=axes.ravel() # flaten the 15 X 15 matrix into 225 array
n_training=len(training) # get the length of the training dataset

#Select a random number from 0 to n_training

for i in np.arange(0,W_grid*L_grid): # create evenly spaces variables
	#Select a random number
	index=np.random.randint(0,n_training)
	# read and display an images with the selected index
	axes[i].imshow(training[index,1:].reshape((28,28)))
	axes[i].set_title(training[index,0],fontsize=8)
	axes[i].axis('off')
plt.subplots_adjust(hspaces=0.4)



# build and train a deep learning model

# Prepare the training and testing dataset

X_train=training[:,1:]/255
Y_train=training[:,0]
X_test=testing[:,1:]/255
y_test=testing[:,0]

#from sklearn.model_selection import train_test_split
# X_train,X_validate,y_train,y_validate=train_test_split(X_train,y_train,test_size=0.2,random_state=12345)


X_train.shape

y_train.shape

# unpack the tuple
X_train=X_train.reshape(X_train.shape[0],*(28,28,1))
X_test=X_test.reshape(X_test.shape[0],*(28,28,1))
#X_validate=X_validate.reshape(X_validate.shape[0],*(28,28,1))

X_train.shape

X_test.shape

from tensorflow.keras import datasets,layers, models

cnn=models.Sequential()
cnn.add(layers.Conv2D(64,(3,3) ,activation='relu',input_shape=(28,28,1)))
cnn.add(layers.MaxPooling2D(2,2))
cnn.add(layers.Con2D(64,(3,3),activation='relu'))
cnn.add(layers.MaxPooling(2,2))
cnn.add(layers.Conv2D(64,(3,3),activation='relu'))
cnn.add(layers.Flatten())
cnn.add(layers.Dens(64,activation='relu'))
cnn.add(layers.Dense(10,activation='softmax'))
cnn.summary()

cnn.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])
epochs=150

# history=cnn.fit(X_train,y_train,batch_size=512,epochs=epochs,verbose=1,validation_data=(X_validate,y_validate))

history=cnn.fit(X_train,y_train,batch_size=512,epochs=epochs,verbose=1)

# evaluate the model

evaluation=cnn.evaluate(X_test,y_test)

print('Test accuracy :{:3f}'.format(evaluation[1]))

# get the predictions for the test data

predicted_classes=cnn.predict_classes(X_test)

L=5
W=5
fig,axes=plt.subplots(L,W,figsize=(12,12))
axes=axes.ravel()

for i in np.arange(0,L*W):
	axes[i].imshow(X_test[i].reshape(28,28))
	axes[i].set_title('prediction class ={:0.if}\n true class={0.1f}').format(predicted_classes[i],y_test[i])0
	axes[i].axis('off')
plt.subplots_adjust(wspaces=0.5)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,predicted_classes)
plt.figure(figsize=(14,10))
sns.heatmap(cm,annot=True)

#sum the diagonal element to get the total true correct values


from sklearn.metrics import classification_report

num_classes=10
target_names=["Class {}".format(i) for i in range(num_classes)]

print(classification_report(y_test,predicted_classes,target_names=target_names))
