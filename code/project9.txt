# import libraries

from google.colab import drive

drive.mount('/content/drive')


!pip install tensorflow=gpu=2.0.0.alpha0


import  tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import random


tf.__version__

# load dataset

(X_train.y_train),(X_test,y_test)=tf.keras.dataset.cifar10.load_data()

X_train.shape
X_test.shape

y_train.shape
y_test.shape

i=300
plt.imshow(X_train[i])
print(y_train[i])


W_grid=4
L_grid=4

fig,axes=plt.subplots(L_grid,W_grid,figsize=(15,15))
axes=axes.ravel()

n_training=len(X_train)

for i in np.arange(0, L_grid*W_grid):
	index=np.random.randint(0,n_training) # pick a random number
	axes[i].imshow(X_train[index])
	axes[i].set_title(y_train[index])
	axes[i].axis('off')
plt.subplots_adjust(hspace=0.4)

n_training

x_train


X_train=X_train.astype('float32')
X_test=X_test.astype('float32')
number_cat=10

y_train

import keras 	

y_train=keras.utils.to_categorical(y_train,number_cat)

y_train

y_test=keras.utils.to_categorical(y_test,number_cat)
y_test

X_train=X_train/255
X_test=X_test/255

X_train

X_train.shape
input_shape=X_train.shape[1:]
input_shape

y_train.shape


# train the model

cnn=tf.keras.Seqential()

cnn.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(32,32,3)))
cnn.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu'))
cnn.add(tf.keras.layers.MaxPooling2D(2,2))
cnn.add(tf.keras.layers.Dropout(0.3))


cnn.add(tf.keras.Conv2D(64,(3,3),activation='relu'))
cnn.add(tf.keras.layers.Con2D(64,(3,3),activation='relu'))
cnn.add(tf.layers.MaxPooling2D(2,2))
cnn.add(tf.layers.Dropout(0.3))
cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(1024,activation='relu'))
cnn.add(tf.keras.layers.Dropout(0.3))
cnn.add(tf.keras.layers.Dense(1024,activation='relu'))

cnn.add(tf.keras.layers.Dense(10,activation='softmax'))
snn.summary()

cnn.compile(optimizer=tf.keras.optimizers.RMSprop(0.0001,decay=1e-6),loss='categorical_crossentropy',metrics=['accuracy'])
epochs=100

history=cnn.fit(X_train,y_train,batch_size=512,epochs=epochs)

# evaluate the model

evluation=cnn.evaluate(X_test,y_test)

print('Test accuracy:{}'.format(evaluation[1]))


predicted_classes=cnn.predicted_classes(X_test)
predicted_classes

y_test

y_test=y_test.argmax(1)

y_test

L=7
W=7
fig,axes=plt.sublots(L,W,figsize=(12,12))
axes=axes.ravel()

for i in np.arange(0,L*W):
	axes[i].imshow(X_test[i])
	axes[i].set_title('Prediction ={}\n True= {}'.format(predicted_classes[i],y_test[i]))
	axes[i].axes('off')

plt.subplots_adjust(wspace=1)

from sklearn.metrics import confusion_matrix

cm=confusion_matrix(predicted_classes,y_test)
cm
plt.figure(figsize=(10,10))
sns.heatmap(cm,annot=True)





